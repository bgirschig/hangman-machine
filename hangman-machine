#!/usr/bin/env python3

# example use:
# ./hangman-machine ......... xwkqfy
# ./hangman-machine j.rd.n.g. hvmcz

# parameters:
#   arg1: pattern - a dot means any letter
#   arg2: list of known wrong letters

import re
import sys
from unidecode import unidecode

# Load the word list
with open("./words.txt", encoding='utf-8') as f:
	text = f.read()
	dictionnary = text.split("\n")

def main():

	pattern = sys.argv[1]
	known_wrong_letters = sys.argv[2] if len(sys.argv) > 2 else ""

	# find possible remaining words, letters, and the new pattern
	wrong_letters = get_wrong_letters(pattern, known_wrong_letters)
	matching = match_pattern(pattern, wrong_letters)
	newPattern = merge_matterns(pattern, pattern_from_list(matching))
	wrong_letters = get_wrong_letters(newPattern, wrong_letters)
	_, statsStrings = letter_stats(matching, wrong_letters)

	# display the results
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	OKGREEN = '\033[92m'
	def bold(val): return f"{BOLD}{val}{ENDC}"
	def green(val): return f"{OKGREEN}{val}{ENDC}"

	print(bold('matching words') + '\n  ' + list_as_table(matching, newline="\n  ", column_char=" - "))
	print(bold('new pattern') + '\n  ' + (newPattern or "None"))
	print(bold('remaining letters') + '\n  ' + list_as_table(statsStrings, sort=False, newline="\n  "))
	if (len(matching) == 1):
		print(bold("Likely result"))
		print(f"  {green(bold(matching[0]))}")

	# new line at the end, to visually separate runs
	print("")


def get_wrong_letters(pattern, known_wrong):
	pattern = unidecode(pattern.replace('.', ''))
	known_wrong = unidecode(known_wrong)

	wrong_letters = "".join(set().union(pattern + known_wrong))
	return wrong_letters

def match_pattern(pattern, wrong_letters):
	charCount = len(pattern)

	if wrong_letters:
		wrong_letters = wrong_letters.replace("-", "\-") # unescaped dash will be badly interpreted in regex
		pattern = pattern.replace('.', f'[^{wrong_letters}]')

	regex = rf"^{pattern}$"
	def pendu_filter(word):
		if len(word) != charCount: return False
		word = str.lower(unidecode(word))
		return re.match(regex, word)

	matching = [word for word in dictionnary if pendu_filter(word)]
	return matching

def set_char(input, index, char):
	return input[:index]+char+input[index+1:]

def pattern_from_list(words):
	if not words: return None
	pattern = words[0]
	for letter_idx in range(len(pattern)):
		for word in words:
			word = unidecode(word)
			if word[letter_idx] != pattern[letter_idx]:
				pattern = set_char(pattern, letter_idx, '.')
				break
	return pattern

def merge_matterns(old_pattern, new_pattern):
	if not new_pattern: return old_pattern
	output = []
	for idx, letter in enumerate(old_pattern):
		if letter != ".":
			output.append(letter)
		else:
			output.append(new_pattern[idx])
	output = "".join(output)
	return output

def letter_stats(words, skipLetters=""):
	skipLetters = skipLetters.replace('.', '') if skipLetters else ""
	stats = {}
	for word in words:
		for letter in unidecode(word):
			letter = str.lower(letter)
			if letter in skipLetters: continue
			if letter not in stats: stats[letter] = 0
			stats[letter] += 1

	stats = [{'letter': key, 'count': stats[key]} for key in stats]
	stats = sorted(stats, key=lambda i: i['count'], reverse=True)
	statsStrings = [f"{stat['letter']}({stat['count']})" for stat in stats]
	return stats, statsStrings

def list_as_table(inputList, sort=True, view_width=100, column_char=" ", newline="\n"):
	if not inputList: return "None"
	max_len = len(max(inputList, key=len))
	if (sort): inputList = sorted(inputList)
	output = []
	cur_line = []
	cur_line_length = 0
	for item in inputList:
		if cur_line_length + len(item) > view_width:
			output.append(column_char.join(cur_line))
			cur_line = []
			cur_line_length = 0
		cur_line_length += len(item) + len(column_char)
		cur_line.append(item)
	output.append(column_char.join(cur_line))
	output = newline.join(output)
	return output


main()